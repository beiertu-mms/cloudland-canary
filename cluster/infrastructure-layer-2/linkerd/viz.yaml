---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRRHl3UGVCU3BuRkRwQ2pLRVlWbFQ5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURNd05ERTVNekEwT0ZvWApEVEkwTURNd016RTVNekEwT0Zvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUFNZV0VLVU90VHgreFFiWlZJRTQ0OWYKaUlWQXU1ZEtKUThJU0oyZnhYU1VtcDJjWjFXVjBGUU5hQVVwTGw4dklwejBvMkNteCtPN2ZBNkdQcldlT1dvZQpUeVIzZ2UyTHdzc2k0Mm5GaW9DbzdmaG4yZGxNQTcrZkFNeUdDWW1Rbzd5T081MW9zUWg3UkxWdHYzL0VqR2VoCmIvREt0UTBRVnVoUitTTVRFTnBTVlpFUUl1QlhIT09hbG1vTDcwRUpXQ1VCUnZnd3pIbWtwdHM0cHBzMVpyR0EKY3FMTklPbE1kVzlaSlZTeHBuMXRaSFRmaE9JZkZzeEF6eUFQczEzdjIwZTBpMDVRUUxENU1aMnhaNHdhQXpTcwpseTQ4SE43QzlESWQ3U0ZVYk5xVDAvWWY2U1AwSnJQSnBlRU0wR2p5eVBiMWNaOE55Nk4za0Zsc3BxTitxVUVDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFKekp2aTU4eVg1NVpVTWhCa25NazB6ZGVuOVhITm9FCnQvdUREeVZKUlc5NFhDR00yNnhiNzRvT3JQNyt1K2RXQVFJdjdhSWNMTzFiQnFsSGdNRjQ3cWdOWlVTSVlPcUMKV25EckgzWDZLeERDVGJzWGd0eHp4aFpDUHNiZFd5QlFPbFZjbVVDRWYycnFvS1piQ2krMXlVdWpOT001cldtbgpRbzFWUTlUdVVMU3pGRjRrRERUTCs3cno5ZU0zWXZjcGVldlNpc3EzNUxmUUxURTlBVmNDTFcxK1M0YnVqTTZiClpLMjEyUWdUYlZvNE5VVGFHWDc3ejNLTjBQRGNBc0FzWWNIeVFJeDBZNmJuTXA3aGgrRktZSHRtYVNhc3BiWisKSXZlSmpYdEp4YmgyNWNNM09jRmFiVEV5T1orMGJXK3M4KzZKaGFxVExBYkdQbFBZRnVBS2ZJTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOUpoWVFwUTYxUEg3RkJ0bFVnVGpqMStJaFVDN2wwb2xEd2hJblovRmRKU2FuWnhuClZaWFFWQTFvQlNrdVh5OGluUFNqWUtiSDQ3dDhEb1krdFo0NWFoNVBKSGVCN1l2Q3l5TGphY1dLZ0tqdCtHZloKMlV3RHY1OEF6SVlKaVpDanZJNDduV2l4Q0h0RXRXMi9mOFNNWjZGdjhNcTFEUkJXNkZINUl4TVEybEpWa1JBaQo0RmNjNDVxV2FndnZRUWxZSlFGRytERE1lYVNtMnppbW16Vm1zWUJ5b3MwZzZVeDFiMWtsVkxHbWZXMWtkTitFCjRoOFd6RURQSUErelhlL2JSN1NMVGxCQXNQa3huYkZuakJvRE5LeVhMandjM3NMME1oM3RJVlJzMnBQVDloL3AKSS9RbXM4bWw0UXpRYVBMSTl2VnhudzNMbzNlUVdXeW1vMzZwUVFJREFRQUJBb0lCQUduQk5PZ1VqeHRqUk52OAp2R0lxR3ZueXBHUjVDS0x4Ty9TejhERzIwdmtGQjVUOSt1L1dScTBRM3RqY1pXQmlVT1RzSVhlNHBOU2lTNUU4CkdnRU0yR1k1bEo1L3pYMlg0REZVZEY5WE9mdEhEeDFJU2JqYVZRU1ZDeE5qSU55SjNVRzVmYTBoaHVuVDRuRlAKY20wYjNsa3dRK1lvdnY5WEFUeVJ0TmFsZDdQczdRWGp5REQvRHpyeDJqeE1hRXhKTXFCN2lEMW5zQ3krTFlUZQovSUtnSEFHOXlBMUhRaTB4OVdyM2VGM2E2Q2YrR0VPenFPdTR5QjcyK3NoVHN2UGNuS21CNjNYYUlhM281ZC93CjVFbThhQ2hXSkREVzBMRmFla1hYSU9wa0p1YWttRDQ4NkxSNzEvNXhPc0JENHJveFJHSUJCMysvcXVVclNYSlIKM2VWR2NzRUNnWUVBL3MrYkl5Q25PbkZwU2N0b0dtS0wrNXRaQitrb1lEelhyZm9ZWEdlTFUwUVpFNmJiNlIyOApRRUEyOXh5c0wrKzRsaVpmOXRhSlJNekoxTzlGRE5Fd3JMaUx6Wk9CeGlBY08rL0Q4TjNtaWEzM0hEYjMvNXBDCmRyMUdLalZtY0thdTJVQWEvbWlKL1p3ak1NN3lVdEZQOW9mNXBPRjNxRzhmUFArQ1dVVXQvSDhDZ1lFQTlieUkKOXVOVFhxdHN6cnQ5ZStSQ0d2ZjNZYXVWRjhlVnFUUkdTMWY2SzJmM2kyZnRtKzNJMlNJQjZtQlNUMXFmamZjVQo2QnN1Ym5vTlhlL200WFZWWGFDcG9zWGk3OTVrT2E3ZzJYVVkzRFkxbFlBT2VOYlV6WWpzT2dTYUlrUkUrS2xsCmp4TDR1RC9saXdkclJJTVMzS3JIWXV3Uk11cTJjTng4dXdTbmVqOENnWUVBL1p3THdHNmpncHVXTzRoajJMNzAKckR2MTVOVy9CZW9Ja0hRM0F1RmIza2dNM1c1WnVpK0tTamlmZkZ2aFZPUzNSMXB5Y084ZU9JZks2bEFxM1pMbgphMEZTaEEyb1FGVjlSSHBpL3IwYzB6TittMnBxY3RCS0RueGI5VzZvd3I1amtIOHBYc1VWY29HUTFPZGtiK0U4ClFSY2M5V29pK2xWL05lcnBCWWpCT0drQ2dZRUFnZmpKSElRWjZWMlQvRGdRWThIVDhQMnNPMTJNU3ZxR1B1dG0KTHAyR3RRU1ZXb2VLbGttTFRNVCs3RjhyeWNydHp5R2JUalJxTjRhWW9WR3M5UnloSFJkSUFjN1dlL1pOWG5FUApmaFRBSkdFTHNGbjl6WTRiR2ViTXd0Y0NTeE4rdzJLZFU3SStHUDI2dy9FVm5EUVRldUZjK2daUUJuVThMNjkrCnpVL2w0UE1DZ1lFQWtMMHVDcWdLSWZPY1RSTENRYmpzUkZNUlp0Ymx3cDBrTmttaHRkdGwvakdPeVhlM1RIOVgKMEtUaXgxSmNXTGZpRVRmUFp5azBmbWhUcjNaWnhWRXdSbDhmLzdFK044QmpxU3dJakNrTFN4cGpXdTFyekNERAorb3oxUHYrTi8vVXdLbnJ3NmlBdlJCaEVQeXpOd0FTc3Mwa0x3enMzb09kWmlWZEhrOFZEV1pBPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRRHl3UGVCU3BuRkRwQ2pLRVlWbFQ5VEFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURNd05ERTVNekEwT0ZvWApEVEkwTURNd016RTVNekEwT0Zvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBUFNZV0VLVU90VHgreFFiWlZJRTQ0OWYKaUlWQXU1ZEtKUThJU0oyZnhYU1VtcDJjWjFXVjBGUU5hQVVwTGw4dklwejBvMkNteCtPN2ZBNkdQcldlT1dvZQpUeVIzZ2UyTHdzc2k0Mm5GaW9DbzdmaG4yZGxNQTcrZkFNeUdDWW1Rbzd5T081MW9zUWg3UkxWdHYzL0VqR2VoCmIvREt0UTBRVnVoUitTTVRFTnBTVlpFUUl1QlhIT09hbG1vTDcwRUpXQ1VCUnZnd3pIbWtwdHM0cHBzMVpyR0EKY3FMTklPbE1kVzlaSlZTeHBuMXRaSFRmaE9JZkZzeEF6eUFQczEzdjIwZTBpMDVRUUxENU1aMnhaNHdhQXpTcwpseTQ4SE43QzlESWQ3U0ZVYk5xVDAvWWY2U1AwSnJQSnBlRU0wR2p5eVBiMWNaOE55Nk4za0Zsc3BxTitxVUVDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFKekp2aTU4eVg1NVpVTWhCa25NazB6ZGVuOVhITm9FCnQvdUREeVZKUlc5NFhDR00yNnhiNzRvT3JQNyt1K2RXQVFJdjdhSWNMTzFiQnFsSGdNRjQ3cWdOWlVTSVlPcUMKV25EckgzWDZLeERDVGJzWGd0eHp4aFpDUHNiZFd5QlFPbFZjbVVDRWYycnFvS1piQ2krMXlVdWpOT001cldtbgpRbzFWUTlUdVVMU3pGRjRrRERUTCs3cno5ZU0zWXZjcGVldlNpc3EzNUxmUUxURTlBVmNDTFcxK1M0YnVqTTZiClpLMjEyUWdUYlZvNE5VVGFHWDc3ejNLTjBQRGNBc0FzWWNIeVFJeDBZNmJuTXA3aGgrRktZSHRtYVNhc3BiWisKSXZlSmpYdEp4YmgyNWNNM09jRmFiVEV5T1orMGJXK3M4KzZKaGFxVExBYkdQbFBZRnVBS2ZJTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: proxy-admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.4
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm stable-2.12.4
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.12.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.4
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.12.4
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.30.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.4
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 0a179ecfb8552bd229a9e6265a5347c8c2dbc4bf0f7de77254fd7308ca77b836
        linkerd.io/created-by: linkerd/helm stable-2.12.4
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.12.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRUkZyaHAzcWVsNW5LS3M2bDdKVGNUREFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURNdwpOREU1TXpBME9Wb1hEVEkwTURNd016RTVNekEwT1Zvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU5Gem5OdUFlaVlqRDFnMWZZWk9PVEQzV1pSSllnOHRYWTU3MVJ2ZGlkL3pPckk4TWNHQytVTkNNakVicGNNNQo5ZVh3eTVGcmx0SnN2T0dIOUJKS05zMDdvYXFkM2NhU0VMMEx0SjdkQjBpbkVHanpTZXk5V2JKOEJhU05sZmp0ClR1ZjB0amhXaHVia051MGhZV1BMRk1MZG9YOHE5ZW9ENVV3NGpkd2hxcXU2eHVmb21ScUtTT0s1ZHlkSHdWZFUKaVlUNmIrTnJqcmhKZnhERWdoNnZOVXYvMUNoZVMzanl1RUFmbHFIZHE1bDU0ZjM5WXZPa0l6OGxDaU9mQlRWSwo4aFU2WkxTbXRrenF1MktZU3pLUGZkQzZzZ1B6ekZ3YzdNQTlsM2NKVXRjVVh5dDBaOGNpbFhIMk0xb05qMWU4Ck1PbTZNU0pmTDN5RE9ZWTZtcGlueVZjQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSnMwNUlTTko1VW5hMzBDY3U3MG5ZTzVlWVFUbGlpUld4Z1gvU25NVmZxeG9xNUF3S1V2aWEwUklUZ04Kck56ZWRlTG4zbDVnY3RDU0dENWRTcUorUjJsTVY3ZVRuSkFRNmpDTjJGcDRtYk9JM3lhT1NxN3RaMWltMTNIeQpEYm50TXhLMytTRGIvL0d2UVBwRlU2cHpvQjY1bFdvSkNEdFZocFdzQ3FydUp3RXhQWUo0cWw0SllPcjRCQUlJCkJtaHhCVnVVeDYyV01YcUkzZktrUzE5VXJFdlFVRkJmYWhvOE9IVUM5dWVGREZwaU43MEhuUnNIb0tlZ3Q2bmoKRkpXOVRHbENreFRXVE9NT3IwbUY5dlhENjBuQlBobnBNcURIK3dieW1pZVEzbkVRSUluSHVYUkxXTEE4UjNIbQpvQ1pqWVZNQWFXcTFkL0JFdDB0bnZwWnI1ekE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMFhPYzI0QjZKaU1QV0RWOWhrNDVNUGRabEVsaUR5MWRqbnZWRzkySjMvTTZzand4CndZTDVRMEl5TVJ1bHd6bjE1ZkRMa1d1VzBteTg0WWYwRWtvMnpUdWhxcDNkeHBJUXZRdTBudDBIU0tjUWFQTkoKN0wxWnNud0ZwSTJWK08xTzUvUzJPRmFHNXVRMjdTRmhZOHNVd3QyaGZ5cjE2Z1BsVERpTjNDR3FxN3JHNStpWgpHb3BJNHJsM0owZkJWMVNKaFBwdjQydU91RWwvRU1TQ0hxODFTLy9VS0Y1TGVQSzRRQitXb2Qycm1YbmgvZjFpCjg2UWpQeVVLSTU4Rk5VcnlGVHBrdEthMlRPcTdZcGhMTW85OTBMcXlBL1BNWEJ6c3dEMlhkd2xTMXhSZkszUm4KeHlLVmNmWXpXZzJQVjd3dzZib3hJbDh2ZklNNWhqcWFtS2ZKVndJREFRQUJBb0lCQUg0R2EyWWptdHVoa3RVSApjbHpDYW1VTkg0ZzYwMWJBZkIrRVlRamdOdHBhVm9IeCtCb3dmVnk3MHNsN2tqU3loa054ckhyMldveUlRdW9NCnpJM0l1OHFuUzdJR1JPLzY2VGxtZHFwejRiTVVXcXBiWUtxaWovcjE1c3RKS2VqYW1QUzJhSUhqaGs0ZEdQTjcKZDBiOVphT09pV0tqN2MxOXhKVWxIaTVLejQ5OXZnYkh4ZGw5SjhFSm96dDNJOEQ1YSsrMVlHQkNlREw1QmpXNApvb3JwZTNnTVFnT0tvSVo5d1R4OU90eVRSU09pQ0dXMWl0Qy8xYjJOL0NNTXlJNGxwL1pabThlVUtPd2ZHUCtaCitObDJiNFg0MmdGQVZKTVNxMTM4RW01cG9JWGRTUE9EN2FYUVppQ1VwY3lkVm5SYWJYa1pEQk44RDdoMUtFUVoKVDF5QmoxRUNnWUVBL0gvTEFPSkxkRTV1Wm9sZGMyOHk2d1ZjNUhhV0p1a1NIbTRSdC9wWnk4SjZXVko0M3dWYwpIYit5ZVoxbmxxYnRqY1JCajEwWHA2ZVJ3V2dxcFBhdkltMFN0VEMxcFB0SkdrRDBxUklWbXY2NkhwSmxpRnpsClRCWTNpUThRR3hYK2JwV0Q4UmhnNU00YktPL2JKY0ZJbHQ2WGx3YnJPdEZMbFR4bU5veG1aZGtDZ1lFQTFGc0gKYTVYWTc3MmJIY2FJanhsVHBiS0N4d2ZnaktFYngxajJocE5zelBDTGpLbjNqSWNnb2RsYmdUUWY5ZUk5TkRwZQp6SVF4QzhJSThwT01jM0VpZXlNY09mR1EvdFBvSE5BYkpnZHI2azg1ZHpqYUtqMlBBZVFWNFpHdk0rQVVjcVJICjdmbXE4dVhWNVlNd3VWMGJ1R2M5bWVjTVptNkMzNFVjYjdJZE9xOENnWUJtNVdFQnpEWTVnRmpIR2tWbDdEUFEKeUkreFhvNFQ3emorQTViZTVYdkFhRkZab3gwMHJVZDdyQW44TzJQaVpjWTYxblp0Q04vQjU2eWpKMkx4ZE1HcwpBc3p6MzVTMlZkelZnUkR5OFRheXdnbHd1Zkg4WHZibVNjdDU1QlNKSlM1WlBEN1hlanJLSXgrNFQvNTdaVWZDCmk1VTA2NUhpbHpYNDYvTXZXWW5GQ1FLQmdDcmljejRyMWRLY2xOM1BnVFo4NCtLYmlVT09lSytOdmFGbGV1dTAKakExYktxTnVrN3FDYzNtYi9wbTZJQlkwNlMxSitHa083U1MxdTc3WlEwenc5UWl2RDMwNEpwTC8wbWszTWJSZApYVkxGU3hLam5aTllPVEFsa3JHcURSckp6dmRUNjk3SVE5aW54Nm1BOCs4TE9aVGs3SkRQRXpjQWJGZWRkeCtyCmRiR3JBb0dBWGk3UW45aWVvVUx6Y1R6RWd2NjhRMTRoeU9MYXBRNHpkd09ndVZVZzJWQ2Nra3hkV3JoUVVTOTYKbWtzRGhmTy9iRVpxQWc2aDA3L0NWNG1OekU2WE1TcUM4d2cwMDZxUnVYcEk4ckVnQ3UxaXJSYTVXaURsK2NHVQowRmNEbkdpMDRNZmJBQU9ycDJ4NlpXMGQ5c2lDeHBJTWF6NmxvbllLK05OYXlvcGxManM9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRRENDQWlpZ0F3SUJBZ0lRUkZyaHAzcWVsNW5LS3M2bDdKVGNUREFOQmdrcWhraUc5dzBCQVFzRkFEQW4KTVNVd0l3WURWUVFERXh4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURNdwpOREU1TXpBME9Wb1hEVEkwTURNd016RTVNekEwT1Zvd0p6RWxNQ01HQTFVRUF4TWNkR0Z3TFdsdWFtVmpkRzl5CkxteHBibXRsY21RdGRtbDZMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUIKQU5Gem5OdUFlaVlqRDFnMWZZWk9PVEQzV1pSSllnOHRYWTU3MVJ2ZGlkL3pPckk4TWNHQytVTkNNakVicGNNNQo5ZVh3eTVGcmx0SnN2T0dIOUJKS05zMDdvYXFkM2NhU0VMMEx0SjdkQjBpbkVHanpTZXk5V2JKOEJhU05sZmp0ClR1ZjB0amhXaHVia051MGhZV1BMRk1MZG9YOHE5ZW9ENVV3NGpkd2hxcXU2eHVmb21ScUtTT0s1ZHlkSHdWZFUKaVlUNmIrTnJqcmhKZnhERWdoNnZOVXYvMUNoZVMzanl1RUFmbHFIZHE1bDU0ZjM5WXZPa0l6OGxDaU9mQlRWSwo4aFU2WkxTbXRrenF1MktZU3pLUGZkQzZzZ1B6ekZ3YzdNQTlsM2NKVXRjVVh5dDBaOGNpbFhIMk0xb05qMWU4Ck1PbTZNU0pmTDN5RE9ZWTZtcGlueVZjQ0F3RUFBYU5vTUdZd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWQKSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1DY0dBMVVkRVFRZwpNQjZDSEhSaGNDMXBibXBsWTNSdmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBSnMwNUlTTko1VW5hMzBDY3U3MG5ZTzVlWVFUbGlpUld4Z1gvU25NVmZxeG9xNUF3S1V2aWEwUklUZ04Kck56ZWRlTG4zbDVnY3RDU0dENWRTcUorUjJsTVY3ZVRuSkFRNmpDTjJGcDRtYk9JM3lhT1NxN3RaMWltMTNIeQpEYm50TXhLMytTRGIvL0d2UVBwRlU2cHpvQjY1bFdvSkNEdFZocFdzQ3FydUp3RXhQWUo0cWw0SllPcjRCQUlJCkJtaHhCVnVVeDYyV01YcUkzZktrUzE5VXJFdlFVRkJmYWhvOE9IVUM5dWVGREZwaU43MEhuUnNIb0tlZ3Q2bmoKRkpXOVRHbENreFRXVE9NT3IwbUY5dlhENjBuQlBobnBNcURIK3dieW1pZVEzbkVRSUluSHVYUkxXTEE4UjNIbQpvQ1pqWVZNQWFXcTFkL0JFdDB0bnZwWnI1ekE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 30493519a473be3361ea48ef2f21a175c3872b2db4a82da50afb431869c1b94c
        linkerd.io/created-by: linkerd/helm stable-2.12.4
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.12.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.4
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.4
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.12.4
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.12.4
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
