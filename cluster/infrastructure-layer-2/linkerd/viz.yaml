---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQUp1OS8ySWZ6WEtQTzFyRndjQkZXYTh3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNU1EY3dPRFE1TURKYQpGdzB5TXpBNU1EY3dPRFE1TURKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN6VFNpUjJIeXlDNGVJWkFhaHd5K0IKRjFRVFFpV2dwVlRUMnFuUk5Bbk9XbEY3cHRJZnZVUVg3YWJKLzd5UjVnb1ZEdEdUbC93N1hod0JvUzBydWgrTwp3RTR2TERDKzBSNEp4ZUQvMTgvb0pEdVBuNGVRZ0F5eDJZWWRrYkpGSDAzWkF4ZWsvWk1jd1dZWGxCak1QdTFFCndtK1pnSUV3NWx5cHpCNlp4M0ZUNldVajdNcjJ1eVRvM2R0YXpoR09mUUtLMzJScWNiUmgwcWR0MnQ2VVFRc3MKeXZRRXptUG5UN05GYmZmZzcvRWgveE81MFlDQ3dIM09oSk5wVVdHK2J2bTdhUkZMejNqTFNXQ3ptay8vbDE2NAo1Z2I2MXNHRmt5YUNBNHRIWkg0bGQzMGNNUm5MOTRqb05LUWhJRE5LYmJrMkZPMzdrZVMyeE5PTUhPK3l4VlB6CkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQms2TVlLMHJXdVBUVDRRanBhbkxrY1llYUs5L20yCkEyWjdvUEpXT2xyeWQ5VVF1S2tzQ0NNQnhqaUR4ZGlvUk1jTEprbmVReDZGY3M2Q3pGbU5FMjRUeTNIcDhKUzQKSjZ3KzkzTmhKRFoxU283bXljZXM3bWx5MDE0aUtndGlidGsvWVA3ZUlFM3lZVDhrajZ3Y0lxVzlwMEZhcHVHSgo1S3dLeGU3N29vTEhicVk2Mm45cFEyWFliRDFzUUJFZlljQnMwZlJvNjdLZU5Mcm5xWkFJcHI2UkJicm1qbVRnCjJPdUJ6T1pUeWFvQ1ZVL3ljeEo0OG0rT3BvNWJOMG10R3Q3NUVmR3YrVGd2Q3hKMyt5RFF1bVhvYVFrazlWaCsKYys3bU11R2hNaXhnWG1vZHNQUldHaFFpK3FXVzlJMms0SUljY2JpbEFwNVJ5eStVUGxZcXA1UVQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBczAwb2tkaDhzZ3VIaUdRR29jTXZnUmRVRTBJbG9LVlUwOXFwMFRRSnpscFJlNmJTCkg3MUVGKzJteWYrOGtlWUtGUTdSazVmOE8xNGNBYUV0SzdvZmpzQk9MeXd3dnRFZUNjWGcvOWZQNkNRN2o1K0gKa0lBTXNkbUdIWkd5UlI5TjJRTVhwUDJUSE1GbUY1UVl6RDd0Uk1Kdm1ZQ0JNT1pjcWN3ZW1jZHhVK2xsSSt6Swo5cnNrNk4zYldzNFJqbjBDaXQ5a2FuRzBZZEtuYmRyZWxFRUxMTXIwQk01ajUwK3pSVzMzNE8veElmOFR1ZEdBCmdzQjl6b1NUYVZGaHZtNzV1MmtSUzg5NHkwbGdzNXBQLzVkZXVPWUcrdGJCaFpNbWdnT0xSMlIrSlhkOUhERVoKeS9lSTZEU2tJU0F6U20yNU5oVHQrNUhrdHNUVGpCenZzc1ZUOHdJREFRQUJBb0lCQUYrQ2RGL3NMOUF2c0F5SgpLN2N6WDdTbUZwVURvVU9Iamo0anRsM0lHSWtoTjFKa3RIMVB0bHdBcmQzZ0tqU1ZrejFRWFhiL2VNNnUvTUFwCmVRUlg2c09CMEtQMEtDc2MvYUU3RlBWem9qNElQdW5za3F2NGFjcTdFbVBoM2xKUHNJb3V5WU9MeDdlRGxieHQKbVNBRFRTUlpabFVnVExFZHBMS1dGcDdYekpoalVKQzE2TEU1S2JydE9ObGNROGk5RU5ETC9ubFN6MkQ3dHVBdgowOWFwMk1jK1FrTFVsK2czaEJTeThRbkFoSEtCaGVKdTVqaERVNU80U01wSUVqMXNFWnJNTlJaQUxOWlFXRUpvCmlySHN5ckZFT25NZEtrTkUwUzJKRDI2djd4d00xZHNtc2VVTlVVQlYrcWpWZUR6OVlYWENFMkxHRjRtS2plUVUKNmdLbkZDRUNnWUVBek9lUGp0dXYxbGV3VXJaVXgvT1FuYXZOMkhwM3RaSmd1cmVJaXVDaERweXdzMGpUaERUVwoyY1pobEFBUGpZVUFHYkdEWnVTdHZpUzVxSjBIdlc2TktkNmJDWEZiRVRVZis3U01EdkNjRXFSL2IrbFNueGUrCkdZZGh6TDJzcy83d0dXVVJYRlNRSE1MamNjSG5QZkh4Tzh1NzJpNTJyRnp1ajBoMGZLSk5IbXNDZ1lFQTRBTXQKUjhsUFhiczcyWVhUNXZBT0VqTFNYcCtqejZVanNocy84eTNpcWVHTkxuZC9NQWg2dVlXdlNsNWhFZE9aU3QrUwpNTnJpQ3dwUC9zeDFGRjI5VE5BYTdVWlE0N3VyWE9qZjE0ZjdkRGlMMzdjaGN4cm1zT01JTWlPME1xbWQxR0cvClhEc1dYQkwxNjlJNFNtQ2RQSVgvVDdFcnZ5cUYyd2R1cmFVSDhwa0NnWUVBbjRObzY3SzBXVzJjVTFlaitxRHYKSlArWldQeEY4dkVJSW5NOGRialhTTFBNajFXVGJDbGlWTml1SC9SSUowaXh3azdCMTdrUVZLVHNiNG9IZTMzegpvUE90eUJVWjZ2UnJlSnllS0FkQnlQV01TOGZjelFORHQwWUFhYzREQTREazB6QXQ2cTNlSHJYTk1FTGVUUWZyClh6eUVlaDZQdmpEK2VrYlNnREF0VHc4Q2dZRUFoVksrdDFQajdaaEs5WnFGMUpPWS9GSE5ETTRjYzdBSWY2OWkKTHp4bkE4NmU5VUhmcTluUUdPeXN1Q2xWd29OYVg4cVNPb3Q3THpEekRXWG9aTGVwdTdhNzMrNFNwSWVFWk9hZwptcWx2Q2V2QnErTlZnQ2xKbFl0NXpFV2RzTzFzWndQS0hYMTVRRkYwbGVibTQ3Vit2NC9NdFVSd0VmV2Y5dzBFClhVcTBZVGtDZ1lCVmU5cXNGOSszNWlDWFFLTFRDTFNoTHU5N3hUaXFsQ0xTOHY3bmlBTmVsQ2tTUzcyREFPYUEKbjVRbnFFZnJIeDZxNkg4VkVjU2dhdzlVUC9PallFMjgzYkZ0QlhOQVdwLzRiR0JWTjlvZkdvSzJMd0gyMUdSMwpKNjdXd3BqVC9iQVkyOW42amQ0UXlSQWtOM0d1ejI2aHhEa09uNWhoV0p2cjVMbURFOThodVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQUp1OS8ySWZ6WEtQTzFyRndjQkZXYTh3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNU1EY3dPRFE1TURKYQpGdzB5TXpBNU1EY3dPRFE1TURKYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUUN6VFNpUjJIeXlDNGVJWkFhaHd5K0IKRjFRVFFpV2dwVlRUMnFuUk5Bbk9XbEY3cHRJZnZVUVg3YWJKLzd5UjVnb1ZEdEdUbC93N1hod0JvUzBydWgrTwp3RTR2TERDKzBSNEp4ZUQvMTgvb0pEdVBuNGVRZ0F5eDJZWWRrYkpGSDAzWkF4ZWsvWk1jd1dZWGxCak1QdTFFCndtK1pnSUV3NWx5cHpCNlp4M0ZUNldVajdNcjJ1eVRvM2R0YXpoR09mUUtLMzJScWNiUmgwcWR0MnQ2VVFRc3MKeXZRRXptUG5UN05GYmZmZzcvRWgveE81MFlDQ3dIM09oSk5wVVdHK2J2bTdhUkZMejNqTFNXQ3ptay8vbDE2NAo1Z2I2MXNHRmt5YUNBNHRIWkg0bGQzMGNNUm5MOTRqb05LUWhJRE5LYmJrMkZPMzdrZVMyeE5PTUhPK3l4VlB6CkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQms2TVlLMHJXdVBUVDRRanBhbkxrY1llYUs5L20yCkEyWjdvUEpXT2xyeWQ5VVF1S2tzQ0NNQnhqaUR4ZGlvUk1jTEprbmVReDZGY3M2Q3pGbU5FMjRUeTNIcDhKUzQKSjZ3KzkzTmhKRFoxU283bXljZXM3bWx5MDE0aUtndGlidGsvWVA3ZUlFM3lZVDhrajZ3Y0lxVzlwMEZhcHVHSgo1S3dLeGU3N29vTEhicVk2Mm45cFEyWFliRDFzUUJFZlljQnMwZlJvNjdLZU5Mcm5xWkFJcHI2UkJicm1qbVRnCjJPdUJ6T1pUeWFvQ1ZVL3ljeEo0OG0rT3BvNWJOMG10R3Q3NUVmR3YrVGd2Q3hKMyt5RFF1bVhvYVFrazlWaCsKYys3bU11R2hNaXhnWG1vZHNQUldHaFFpK3FXVzlJMms0SUljY2JpbEFwNVJ5eStVUGxZcXA1UVQKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: proxy-admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.0
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm stable-2.12.0
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.12.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.0
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.12.0
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.30.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.0
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: fe42a288198294bb142847214d4a77b26b0de42525364280ec1d9779da25b74c
        linkerd.io/created-by: linkerd/helm stable-2.12.0
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.12.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU1uSDJPK3YyZDBzL0tNaUtheDQ5cnN3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNQpNRGN3T0RRNU1ESmFGdzB5TXpBNU1EY3dPRFE1TURKYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDY2ljeWNqTkFHVVYwc012VnNvaXhWUzRSNjZBd0dLTVdwLzE5YmRoMnNTS1ZWRUU3blA5VDZVS1I4UlVLZAorWDVZOExLUFB5ZDhlQVNEWC9VTnJEeXdXcVZVUms1bUxhYzdqOUhIOEV6WkU0S05xYzNyQ2VhYVY5dWxjRWZxCjJGaVB5YTJaNjd5UFhtdW9MQmxJUXNjc1B6bU1yQUJtSTJRRXU2c2FjdUp5aDkwaFAxbnFIUDZOOHV6cnpLc0YKc2FJVDAyWm00WExLS04wV1F0d3UrU2dVOVdyeE90VkppcTVRWHNqcnd4Qi9rWFJXWWFqUnFPeEpmai9TOEhhNAp3dm1LaVpGVTVyd3VlaExZUmxQNnhJbDhjSTJXRTcrUW13MFZZOGtNSjVpNGVqRCtvUTdSOCtsOTVHWitEWVlKClJReUx4SHErQnBKdndNMWxaNjNQYkFWWEFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUEzNVBUajlLUGM0emR2VSt5VDJRRHpiWFl3b0t6cUVMYzBXTUFRa0JEcGhrSWIrVXR4TWxzdGNiMk4KVlRhYysyT01Sc1hSQmVpZ2crZE1oUWNtKzhtRkdQTGs4YkQ1cEhObUZDdUhSRzJRcDU0SXdabi9RSWtZYmE2WgpQMDk4dTdHOFMrbmZwT254R3MyNElpUUQ5cWR1cmlXQkNVTFZLRlhlcTRpOTdHaUdtUXlDd3ZZbTNqZzcrbXIzCnhPam9xNkhsdEdCckdRTml2VTZISmI1WXRpL0tNUWprNDJ6TXRzSGhZQlVYVlZqUUlLdm9GWC9Rc2QrZ2lzTHkKQVJuYzFLb3h5bGtmekJyNjdVbXpIZ01Jam5ZNkIxMmU5OEdQRFo3cjlFQVoydTdPZzkzVUJDQ1lPdEJoTmhicgp3bTd3amVLMFkwUDZGdElSVTJ6ZXQxeTBGSTErCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbkluTW5JelFCbEZkTERMMWJLSXNWVXVFZXVnTUJpakZxZjlmVzNZZHJFaWxWUkJPCjV6L1UrbENrZkVWQ25mbCtXUEN5ano4bmZIZ0VnMS8xRGF3OHNGcWxWRVpPWmkybk80L1J4L0JNMlJPQ2phbk4KNndubW1sZmJwWEJINnRoWWo4bXRtZXU4ajE1cnFDd1pTRUxITEQ4NWpLd0FaaU5rQkx1ckduTGljb2ZkSVQ5Wgo2aHoramZMczY4eXJCYkdpRTlObVp1Rnl5aWpkRmtMY0x2a29GUFZxOFRyVlNZcXVVRjdJNjhNUWY1RjBWbUdvCjBhanNTWDQvMHZCMnVNTDVpb21SVk9hOExub1MyRVpUK3NTSmZIQ05saE8va0pzTkZXUEpEQ2VZdUhvdy9xRU8KMGZQcGZlUm1mZzJHQ1VVTWk4UjZ2Z2FTYjhETlpXZXR6MndGVndJREFRQUJBb0lCQUhWRlFwVXhaSktuRjc4SgoraFRGTmFNOHJPWUt1eDlPSWk3bDBzRkpMcGVuNEx4bU9FWkQ2c0VQOHZucVJTcm1BMEtNSjZqcTdpRHdKS2xyCkZNR0dlL3krRzhlVDJCM3lLNnVTWmQxOFo0WGtlTlM2RmpyenN0K0QzRmdIVXNsY0JKVEx5Uk5icUdwYm1SbG0KMkJYcmVSenJ6S2hYSHdGbG1BTjN1SXBhOE14TlVqSEczZnlWaFBld3d1Vno4MDlRbm5RMmlQejd1OE96clRUWgpyeG9vSWJtWGlrdU1JMDVodzV3b3g0dUpzN2svanhPWHJNZ2FXZEFkekpnaW5ZM2dYZnJsRURrdk12SjRjR1lkCjJJb24rVkErMk1DZ0NhblJVTG9jd1FJelk1YzdCcTBMREwvb1ZDeE1aR0hNS1luKzEySVZPbFZkYWp2OUxveWIKaXJrZ0p3a0NnWUVBd0tZVmZNeGpNcy92aFVRWmtzdDlhY2ZwQk9WVFQ0SGhkUFFMcnFjU1JiZHRzY3hFSWJQNgpBaGFna0s5Q1B1clJIQWJGT2ZsWUlOT2llNUVsYXNpZzcyMGtPZ2tadDdkSDRTWldxYzBkL05jRU1JdGFiMlVtCjdrakNrOG4rbG93U3ZDb1JLeHhDZGMrU1NRT0tva2l1N0dEejUxeWZKVlE1cjcxM1A4ZmFGNXNDZ1lFQTBBUEwKbG16Znl6bVYxTkZaNWFpeW9pWjJWVlFLemY5RWtodzBSTUxFeE1BVTd4Uk1CRGY0YjBzT3FRRzNwa1crcTJYZwplZFp0YVJwa3YrSDErMUZpQUtEKyt5Wm9hTTIyZG16aU9YUUdCZ2s4dmhIanBUNnUvWnFNNDBhOGRMQmh4ZjVpCjV4bGpQU3N6elRpWjh6NGxsaGRjMndKM080REhrTHZhQXlxOEt2VUNnWUVBZ0xhMnhwSWNlUmVhMWJSaFRjWHQKdmg1V0h2SkZqbXFkd3pGSEdPTUJmMWtGem5SRzFTblZrVTJpNitoYzM0S3VRZ1o0QWJzSjJhenM4NWhQb3AvMwpmdUN5QXFDUDhVSmdvUnFuYm4zZ1drMGl2SGh1N054dGZXbFpyN3FYQWVrR24zZVB6dmpyb3FFVUFQcC94dHUvCkc2blBiRFpqRW1MS3hCTlh1R0tENFo4Q2dZQTZoMWJaVkhrRHJZaERBVVRTSWMxaFlvRVpNVFI1RWNJeGVrNGEKcXRMQ3FXazZlL09IbkZnQ3VKTy9hZ1JLZklWUnBMQ3NsM0RoaWRPZlNlejBjY21wYzZOSzkxdVpZWWhkZWZXTgpST0FOQXJ4Y25wdjIrdFF4OXpKOUlJSVdNeXJQa3V3eEtpdUtJb1hJMEl4QXJOUFdqMnhKRTBDSk5ZcnhabW5KClNsVDNvUUtCZ1FDT2dOamVDYjIxYjlRVDFqNGNiTU9WelpYbkFvMjFQNklCV08zaENROFgwWlBrQXhPRExHRUQKTE0yKzZYdS9JYjRURmxDS3ltMWRiaGtFY0NDN1gwVlByR0taRmVXeTVBK0ZkVWpQSytCNGx0N3dZaEZzN0twOApJZHU3L3JsdE9kNkkvWVdjZm44VmZ4UC9LWDBGM2ROcURJVGEwR2paYnQzK25UQlI2cVlzR0E9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQU1uSDJPK3YyZDBzL0tNaUtheDQ5cnN3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpBNQpNRGN3T0RRNU1ESmFGdzB5TXpBNU1EY3dPRFE1TURKYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDY2ljeWNqTkFHVVYwc012VnNvaXhWUzRSNjZBd0dLTVdwLzE5YmRoMnNTS1ZWRUU3blA5VDZVS1I4UlVLZAorWDVZOExLUFB5ZDhlQVNEWC9VTnJEeXdXcVZVUms1bUxhYzdqOUhIOEV6WkU0S05xYzNyQ2VhYVY5dWxjRWZxCjJGaVB5YTJaNjd5UFhtdW9MQmxJUXNjc1B6bU1yQUJtSTJRRXU2c2FjdUp5aDkwaFAxbnFIUDZOOHV6cnpLc0YKc2FJVDAyWm00WExLS04wV1F0d3UrU2dVOVdyeE90VkppcTVRWHNqcnd4Qi9rWFJXWWFqUnFPeEpmai9TOEhhNAp3dm1LaVpGVTVyd3VlaExZUmxQNnhJbDhjSTJXRTcrUW13MFZZOGtNSjVpNGVqRCtvUTdSOCtsOTVHWitEWVlKClJReUx4SHErQnBKdndNMWxaNjNQYkFWWEFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUEzNVBUajlLUGM0emR2VSt5VDJRRHpiWFl3b0t6cUVMYzBXTUFRa0JEcGhrSWIrVXR4TWxzdGNiMk4KVlRhYysyT01Sc1hSQmVpZ2crZE1oUWNtKzhtRkdQTGs4YkQ1cEhObUZDdUhSRzJRcDU0SXdabi9RSWtZYmE2WgpQMDk4dTdHOFMrbmZwT254R3MyNElpUUQ5cWR1cmlXQkNVTFZLRlhlcTRpOTdHaUdtUXlDd3ZZbTNqZzcrbXIzCnhPam9xNkhsdEdCckdRTml2VTZISmI1WXRpL0tNUWprNDJ6TXRzSGhZQlVYVlZqUUlLdm9GWC9Rc2QrZ2lzTHkKQVJuYzFLb3h5bGtmekJyNjdVbXpIZ01Jam5ZNkIxMmU5OEdQRFo3cjlFQVoydTdPZzkzVUJDQ1lPdEJoTmhicgp3bTd3amVLMFkwUDZGdElSVTJ6ZXQxeTBGSTErCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: d848f394de1fca37f8b128f9eeb51b3270b325660ec4bc120b7bd0e5d8f7c218
        linkerd.io/created-by: linkerd/helm stable-2.12.0
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.12.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.0
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.0
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.12.0
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.12.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
